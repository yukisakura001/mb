name: Build and Release (Windows)

on:
  push:
    tags:
      - "v*" # v0.1.6 のようなタグを push した時に実行

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Rustツールチェーンのセットアップ
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 3. プッシュされたタグを取得
      - name: Get tag name
        id: get_tag
        shell: pwsh
        run: |
          $tagName = "${env:GITHUB_REF}" -replace '.*/', ''         # v0.1.6
          Write-Output "TAG_NAME=$tagName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "Tag name is $tagName"

      # 4. Rust バイナリをビルド
      - name: Build
        run: cargo build --release

      # 5. コミットメッセージを取得（リリースタイトルに使用）
      - name: Get commit message
        shell: pwsh
        run: |
          $message = git log -1 --pretty=%B
          # 改行文字を除去してGitHub Actionsで扱いやすくする
          $message = $message -replace "`n", " " -replace "`r", ""
          Write-Output "RELEASE_MESSAGE=$message" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 6. update.md の内容を取得（リリース本文に使用）
      - name: Get release body
        shell: pwsh
        run: |
          if (Test-Path update.md) {
            $body = Get-Content update.md -Raw
            # 改行の処理を適切に行う
            $body = $body -replace "`r`n", "`n"
          } else {
            $body = "No update.md found"
          }
          # 環境変数に複数行テキストを設定する場合の推奨方法
          $delimiter = "EOF_DELIMITER_$(Get-Random)"
          Write-Output "RELEASE_BODY<<$delimiter" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output $body | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output $delimiter | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 7. GitHub Release を作成
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_MESSAGE }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          files: target/release/mb.exe # ビルドしたバイナリも一緒にアップロード
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
