name: Build and Release (Windows)

on:
  push:
    tags:
      - "release-*" # release-v0.1.5 のようなタグを push した時に実行

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. ソースコードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Rustツールチェーンのセットアップ
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 3. release-vX.Y.Z から vX.Y.Z を抽出 (PowerShell)
      - name: Extract release tag
        id: extract_tag
        shell: pwsh
        run: |
          $fullTag = "${env:GITHUB_REF}" -replace '.*/', ''         # release-v0.1.5
          $releaseTag = $fullTag -replace '^release-', ''           # v0.1.5
          Write-Output "RELEASE_TAG=$releaseTag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "Release tag will be $releaseTag"

      # 4. 新しいタグを作成 & push (PowerShell)
      - name: Create release tag
        shell: pwsh
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          if (git rev-parse $env:RELEASE_TAG 2>$null) {
            Write-Output "Tag $env:RELEASE_TAG already exists, skipping creation"
          } else {
            git tag $env:RELEASE_TAG
            git push origin $env:RELEASE_TAG
          }

      # 5. Rust バイナリをビルド
      - name: Build
        run: cargo build --release

      # 6. コミットメッセージを取得（リリースタイトルに使用）
      - name: Get commit message
        shell: pwsh
        run: |
          $message = git log -1 --pretty=%B
          Write-Output "RELEASE_MESSAGE=$message" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 7. update.md の内容を取得（リリース本文に使用）
      - name: Get release body
        shell: pwsh
        run: |
          if (Test-Path update.md) {
            $body = Get-Content update.md -Raw
          } else {
            $body = "No update.md found"
          }
          Write-Output "RELEASE_BODY=$body" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 8. GitHub Release を作成
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_MESSAGE }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          allow_updates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. ビルドしたバイナリをアップロード
      - name: Upload binary
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: target/release/mb.exe # Cargo.toml [package] name に合わせる
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
